How did viewing a diff between two versions of a 
file help you see the bug that was introduced?

A serial search was unnecessary, thus reducing
the potential for wasted time and error.



How could having easy acces to the entire history 
of a file make you a more efficient programmer in 
the long term?

Having such access makes it possible to learn from
mistakes, especially after your perspective has 
changed (due to learning).



What do you think are the pros and cons of manually 
choosing when to create a commit, like you do in Git,
vs having versions automatically saved, like Google
Docs does?

With manual commits, there is more logical control 
for the programmer.  The history will likely be 
cleaner and make more sense. 



Why do you think some version control systems, like
Git, allow saving multiple files in one commit, while
others, like Google Docs, treat each file separately?

The two version control systems expect the user to be
committing versions of different kinds of files.



How can you use the commands git log and git diff to 
view the history of files?

Use git log while in the directory of the repository of 
interest to view the commit history and to locate the 
commit of interest.  Use git diff (version1 version2) to 
compare differences between two commit versions.



How might using version control make you more confident to make changes that could break something?

Foreknowledge that you can undo your errors may lead to more confidence.



Now that you have your workspace set up, what do you want to use Git for?

So far, I know how to use Git to start Sublime, access and compare versions of file commits, navigate Windows file system and move files.  I want to learn what else can be done in Git.
